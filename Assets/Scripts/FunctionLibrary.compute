#pragma kernel FunctionKernel
// shader uses HLSL syntax
RWStructuredBuffer<float3> _Position; //to get read write enabled version of strcutured buffer

uint _Resolution; // to store the position of a point we need to know the graph's resolution

float _Step, _Time; //like _Smoothness

float2 GetUV (uint3 id){// to return the UV coordinates as a float
	return (id.xy + 0.5) * _Step - 1.0; //same as graph logic
}

void SetPosition(uint3 id, float3 POSITION){
	if(id.x < _Resolution && id.y < _Resolution){
			_Position [id.x + id.y * _Resolution] = POSITION; //store 2D data in a 1D array given an identifier and a position to set
	}
}

#define PI 3.14159265358979323846
//for PI to be defined in HLSL
float3 WaveVec(float u, float v, float t) //f(x,t) = sin(pi(x + t)) made it in terms of shader language HLSL
    {
        float3 p;
        p.x = u;
        p.y = sin(PI * (u + v + t));
        p.z = v;
        return p;
    }

[numthreads(8, 8, 1)]
void FunctionKernel(uint3 id: SV_DISPATCHTHREADID){ //to specify the paramter is a thread identifier
		float2 uv = GetUV(id); 
		SetPosition(id, WaveVec(uv.x, uv.y, _Time)) ;//setting the position and the reference
}
